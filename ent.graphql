directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateProductInput is used for create Product object.
Input was generated by ent.
"""
input CreateProductInput {
  datecreated: Time
  dateupdated: Time
  name: String!
  description: String!
  price: Float!
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "entdemo/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Product implements Node {
  id: ID!
  datecreated: Time! @goField(name: "DateCreated", forceResolver: false)
  dateupdated: Time! @goField(name: "DateUpdated", forceResolver: false)
  name: String!
  description: String!
  price: Float!
}
"""A connection to a list of items."""
type ProductConnection {
  """A list of edges."""
  edges: [ProductEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ProductEdge {
  """The item at the end of the edge."""
  node: Product
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Product connections"""
input ProductOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Products."""
  field: ProductOrderField!
}
"""Properties by which Product connections can be ordered."""
enum ProductOrderField {
  ID
  DATECREATED
  DATEUPDATED
  NAME
  DESCRIPTION
  PRICE
}
"""
ProductWhereInput is used for filtering Product objects.
Input was generated by ent.
"""
input ProductWhereInput {
  not: ProductWhereInput
  and: [ProductWhereInput!]
  or: [ProductWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """dateCreated field predicates"""
  datecreated: Time
  datecreatedNEQ: Time
  datecreatedIn: [Time!]
  datecreatedNotIn: [Time!]
  datecreatedGT: Time
  datecreatedGTE: Time
  datecreatedLT: Time
  datecreatedLTE: Time
  """dateUpdated field predicates"""
  dateupdated: Time
  dateupdatedNEQ: Time
  dateupdatedIn: [Time!]
  dateupdatedNotIn: [Time!]
  dateupdatedGT: Time
  dateupdatedGTE: Time
  dateupdatedLT: Time
  dateupdatedLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """price field predicates"""
  price: Float
  priceNEQ: Float
  priceIn: [Float!]
  priceNotIn: [Float!]
  priceGT: Float
  priceGTE: Float
  priceLT: Float
  priceLTE: Float
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  products(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Products returned from the connection."""
    orderBy: [ProductOrder!]

    """Filtering options for Products returned from the connection."""
    where: ProductWhereInput
  ): ProductConnection!
}
"""The builtin Time type"""
scalar Time
"""
UpdateProductInput is used for update Product object.
Input was generated by ent.
"""
input UpdateProductInput {
  dateupdated: Time
  name: String
  description: String
  price: Float
}
