// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"
)

// CreateProductInput represents a mutation input for creating products.
type CreateProductInput struct {
	DateCreated *time.Time
	DateUpdated *time.Time
	Name        string
	Description string
	Price       float64
}

// Mutate applies the CreateProductInput on the ProductMutation builder.
func (i *CreateProductInput) Mutate(m *ProductMutation) {
	if v := i.DateCreated; v != nil {
		m.SetDateCreated(*v)
	}
	if v := i.DateUpdated; v != nil {
		m.SetDateUpdated(*v)
	}
	m.SetName(i.Name)
	m.SetDescription(i.Description)
	m.SetPrice(i.Price)
}

// SetInput applies the change-set in the CreateProductInput on the ProductCreate builder.
func (c *ProductCreate) SetInput(i CreateProductInput) *ProductCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateProductInput represents a mutation input for updating products.
type UpdateProductInput struct {
	DateUpdated *time.Time
	Name        *string
	Description *string
	Price       *float64
}

// Mutate applies the UpdateProductInput on the ProductMutation builder.
func (i *UpdateProductInput) Mutate(m *ProductMutation) {
	if v := i.DateUpdated; v != nil {
		m.SetDateUpdated(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Price; v != nil {
		m.SetPrice(*v)
	}
}

// SetInput applies the change-set in the UpdateProductInput on the ProductUpdate builder.
func (c *ProductUpdate) SetInput(i UpdateProductInput) *ProductUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateProductInput on the ProductUpdateOne builder.
func (c *ProductUpdateOne) SetInput(i UpdateProductInput) *ProductUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
